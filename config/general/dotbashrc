#
# ~/.bashrc
#

use_color=true

if ${use_color} ; then
	PS1='\033[1;38;5;195m\u@\h: \033[1;38;5;228m${PWD}\033[0;39m\n$ '
	alias ls='ls --color=auto'
	alias grep='grep --colour=auto'
	alias egrep='egrep --colour=auto'
	alias fgrep='fgrep --colour=auto'
	alias ll="ls -alF"
else
	if [[ ${EUID} == 0 ]] ; then
		# show root@ when we don't have colors
		PS1='\u@\h \W \$ '
	else
		PS1='\u@\h \w \$ '
	fi
fi

# # ex - archive extractor
# # usage: ex <file>
ex ()
{
	if [ -f $1 ] ; then
		case $1 in
			*.tar.bz2)   tar xjf $1   ;;
			*.tar.gz)    tar xzf $1   ;;
			*.bz2)       bunzip2 $1   ;;
			*.rar)       unrar x $1     ;;
			*.gz)        gunzip $1    ;;
			*.tar)       tar xf $1    ;;
			*.tbz2)      tar xjf $1   ;;
			*.tgz)       tar xzf $1   ;;
			*.zip)       unzip $1     ;;
			*.Z)         uncompress $1;;
			*.7z)        7z x $1      ;;
			*)           echo "'$1' cannot be extracted via ex()" ;;
		esac
	else
		echo "'$1' is not a valid file"
	fi
}

alias running_services='systemctl list-units  --type=service  --state=running'
alias open_port='sudo lsof -i -P -n | grep LISTEN'
alias ranger='ranger --choosedir=$HOME/.rangerdir; LASTDIR=`cat $HOME/.rangerdir`; cd "$LASTDIR"'

grid()
{
	csvlook -I -y0 $1 | less -S
}

# Setup fzf
# ---------
if [[ ! "$PATH" == $HOME/.config/nvim/autoload/plugged/fzf/bin* ]]; then
	export PATH="${PATH}:$HOME/.config/nvim/autoload/plugged/fzf/bin"
	# Auto-completion
	[[ $- == *i* ]] && source "$HOME/.config/nvim/autoload/plugged/fzf/shell/completion.bash" 2> /dev/null
	# Key bindings
	source "$HOME/.config/nvim/autoload/plugged/fzf/shell/key-bindings.bash"
fi


[[ -f $HOME/.cargo/env ]] && source "$HOME/.cargo/env"

alias cp="cp -i"                          # confirm before overwriting something
alias rm="rm -i"                          # confirm before remove something
alias df='df -h'                          # human-readable sizes
alias free='free -m'                      # show sizes in MB
alias np='nano -w PKGBUILD'
alias more=less
alias vi=nvim
alias vim=nvim
alias cat=bat


#conda activate py_calc

alias ipy_start="nohup jupyter notebook --ip 0.0.0.0 --port 9999 --no-browser &"
# <<< conda initialize <<<

export EDITOR=nvim
export SVN_EDITOR=nvim

# C/C++ setting
export CC=gcc
export CXX=g++
export EIGENROOT="$HOME/.local/repo/eigen"
export PYBIND11="/etc/envs/py_env/envs/py_calc/lib/python3.8/site-packages/pybind11/include"
export LLVM_ROOT="$HOME/.local/repo/llvm-project"

# Python setting
export HOMEREPO="$HOME/JoshuaTree"
export PYTHONPATH="$HOMEREPO/python/"
export PYTHONPATH="${PYTHONPATH}:$HOME/ws/repo/Talinity/utils"
export TERM=xterm-256color

# npm local package
[ -d "$HOME/node_modules/.bin" ] && export PATH="$HOME/node_modules/.bin:$PATH"

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/opt/env/miniconda/bin/conda' 'shell.bash' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
	eval "$__conda_setup"
else
	if [ -f "/opt/env/miniconda/etc/profile.d/conda.sh" ]; then
		. "/opt/env/miniconda/etc/profile.d/conda.sh"
	else
		export PATH="/opt/env/miniconda/bin:$PATH"
	fi
fi
unset __conda_setup
# <<< conda initialize <<<
conda activate pycalc
